// https://stackoverflow.com/questions/55865403/how-to-access-the-super-classs-private-member-in-javascript
class RubyParser {
    #REGEX;
//    #REGEX = new RegExp(`([${this.#KANJI}${this.#ALPHABET}]{1,${this.#RB_LEN}}?)[(（《]([^\\n]{1,${this.#RT_LEN}}?)[)）》]`, 'g');
    get RegEx() {console.log('Rub', this);  return this.#REGEX; }
    constractor(REGEX) { this.#REGEX = REGEX; }
    parse(text) {
        return text.replace(this.#REGEX, (match, rb, rt)=>{
            return `<ruby>${rb}<rp>（</rp><rt>${rt}</rt><rp>）</rp></ruby>`;
        });
    }
}
/*
class OptionalRubyParser extends RubyParser { // 字種、字数、囲み文字を制限したもの
    #OPTIONS = {
        BEGIN: '|｜',
        RB: '^\\n',
        RT: '^\\n',
        RB_LEN: 10,
        RT_LEN: 20,
        ENC_BEGIN: '(（《{｛',
        ENC_END: ')）》}｝',
    };
    get DefaultOptions() { return this.#OPTIONS; }
    constractor(options) {
        let opt = { ...this.DefaultOptions, ...options };
//        super.#REGEX = new RegExp(`[${opt.BEGIN}]([${opt.RB}]{1,${opt.RB_LEN}}?)[${opt.ENC_BEGIN}]([${opt.RT}]{1,${opt.RT_LEN}}?)[${opt.ENC_END}]`, 'g');
//        super(this.#REGEX);
        super(new RegExp(`[${opt.BEGIN}]([${opt.RB}]{1,${opt.RB_LEN}}?)[${opt.ENC_BEGIN}]([${opt.RT}]{1,${opt.RT_LEN}}?)[${opt.ENC_END}]`, 'g'));
    }
}
*/ 
class OptionalRubyParser extends RubyParser { // 字種、字数、囲み文字を制限したもの
    static #DEFAULT_OPTIONS = {
        BEGIN: '|｜',
        RB: '^\\n',
        RT: '^\\n',
        RB_LEN: 10,
        RT_LEN: 20,
        ENC_BEGIN: '(（《{｛',
        ENC_END: ')）》}｝',
    };
    #options;
    constructor(regexp, options={}) {
//        let opt = { ...this.DefaultOptions, ...options };
//        super(new RegExp(`[${opt.BEGIN}]([${opt.RB}]{1,${opt.RB_LEN}}?)[${opt.ENC_BEGIN}]([${opt.RT}]{1,${opt.RT_LEN}}?)[${opt.ENC_END}]`, 'g'));
        super(regexp);
        this.#options = { ...OptionalRubyParser.#DEFAULT_OPTIONS, ...options };
    }
    static get DefaultOptions() { return OptionalRubyParser.#DEFAULT_OPTIONS; }
//    get DefaultOptions() { return this.#OPTIONS; }
    get Options() { return this.#options; }
    get RegEx() { console.log('Opt'); return super.RegEx; }
}
class LongRubyParser extends OptionalRubyParser { // 字種、字数、囲み文字を制限したもの
    constructor(options={}) {
        let opt = { ...OptionalRubyParser.DefaultOptions, ...options };
        super(new RegExp(`[${opt.BEGIN}]([${opt.RB}]{1,${opt.RB_LEN}}?)[${opt.ENC_BEGIN}]([${opt.RT}]{1,${opt.RT_LEN}}?)[${opt.ENC_END}]`, 'g'), opt);
        //super(new RegExp(`[${opt.BEGIN}]([${opt.RB}]{1,${opt.RB_LEN}}?)[${opt.ENC_BEGIN}]([${opt.RT}]{1,${opt.RT_LEN}}?)[${opt.ENC_END}]`, 'g'), options);
    }
    get RegEx() { return super.RegEx; }
}
class ShortRubyParser extends OptionalRubyParser { // 
    #KANJI = '\\u2e80-\\u2fdf\\u3005\\u3007\\u303b\\u4e00-\\u9faf\\u3400-\\u4dbf\\uf900-\\ufaff';
    #ALPHABET = 'A-Za-zＡ-Ｚａ-ｚ';
    #NUMBER = '0-9０-９'
    #WIDE_SIMBOL = '\\u3000-\\u3040\\u3097-\\u30A0\\u30FB-\\u30FF'
    #HIRAGANA = '\\u3041-\\u3096'
    #KATAKANA = '\\u30A1-\\u30FA'
    constructor(options={}) {
//        delete this.DefaultOptions['BEGIN'];
//        this.DefaultOptions['RB'] = `${this.#KANJI}${this.#ALPHABET}${this.#NUMBER}`;
//        let opt = { ...super.DefaultOptions, ...options };
        //const def = {RB: `${#KANJI}${this.#ALPHABET}${this.#NUMBER}` };
        //const def = {RB: `${#KANJI}${#ALPHABET}${#NUMBER}` };
        const def = {RB: '' };
        let opt = { ...OptionalRubyParser.DefaultOptions, def, ...options };
        delete opt['BEGIN'];
        super(new RegExp(`([${opt.RB}]{1,${opt.RB_LEN}}?)[${opt.ENC_BEGIN}]([${opt.RT}]{1,${opt.RT_LEN}}?)[${opt.ENC_END}]`, 'g'), opt);
    }
//    get DefaultOptions() { return this.#OPTIONS; }
    get RegEx() { return super.RegEx; }
}
//class ConstraintLongRubyParser extends RubyParser { // 字種、字数、囲み文字を制限したもの

class CommonRubyParser extends LongRubyParser { // 漢字｛よみ｝
    constructor() { super({ENC_BEGIN:'《', ENC_END:'》'}); }
}
class NarouShortRubyParser extends ShortRubyParser { // 
    constructor() { super({ENC_BEGIN:'(（《', ENC_END:')）》'}); }
}

/*

class SimpleRubyParser extends RubyParser { // 漢字｛よみ｝
    #RB = '[^\\n]';
    #RT = '[^\\n]';
    #KANJI = '\\u2e80-\\u2fdf\\u3005\\3007\\303b\\u4e00-\\u9faf\\u3400-\\u4dbf\\uf900-\\ufaff';
    #ALPHABET = 'A-Za-z0-9Ａ-Ｚａ-ｚ０-９';
    #RB_LEN = 20;
    #RT_LEN = 50;
    #REGEX = new RegExp(`([${this.#RB}${this.#ALPHABET}]{1,${this.#RB_LEN}}?)[(（《]([^\\n]{1,${this.#RT_LEN}}?)[)）》]`, 'g');
    constractor(REGEX) {
        super(REGEX);
        this.#REGEX = REGEX;
    }
}
class SugarRubyParser extends RubyParser { // 漢字｛よみ｝
    #KANJI = '\\u2e80-\\u2fdf\\u3005\\3007\\303b\\u4e00-\\u9faf\\u3400-\\u4dbf\\uf900-\\ufaff';
    #ALPHABET = 'A-Za-z0-9Ａ-Ｚａ-ｚ０-９';
    #RB_LEN = 20;
    #RT_LEN = 50;
    #REGEX = new RegExp(`([${this.#KANJI}${this.#ALPHABET}]{1,${this.#RB_LEN}}?)[(（《]([^\\n]{1,${this.#RT_LEN}}?)[)）》]`, 'g');
    constractor(REGEX) {
        super(REGEX);
        this.#REGEX = REGEX;
    }
}
*/

